Example BASH Scripts for Common Tasks
=====================================

AaronTools command line scripts (CLSs) make it simple to write BASH scripts to automate many routine tasks.
A few examples are provided here to get you started!
More examples will be added over time to make this a sort of 'cookbook' of AaronTools BASH scripts (if you have a BASH script you'd like us to add send it our way!).
Similarly, if there is something you are trying to do using AaronTools contact us and we can (possibly) help.

Note that these scripts assume you have correctly installed AaronTools (see :doc:`install`) and configured the :doc:`../other_docs/job_templates`.

Optimization and Frequencies
----------------------------

Perhaps the most common task in routine quantum chemistry applications is optimizing geometries for a set of molecules and computing harmonic vibrational frequencies.
This can be done simply using AaronTools CLSs using any quantum chemistry software package.
Here we use Gaussian as an example, but trivial changes to the scripts below would instead use Q-Chem, ORCA, or Psi4.

For instance, suppose we have a set of XYZ files containing initial geomtries that we would like to optimize.
These geometries could be for a set of molecules from some other source or a set of conformations of a single molecule generated by CREST, for example.
The following script will submit wB97XD/def2-TZVP optimization and frequency jobs on all XYZ files in the current directory:

.. literalinclude:: bash/opt_all
   :language: bash


If these XYZ files were different conformations of the same molecule, after all optimizations were complete we could then identify the unique ones using :doc:`../cls/unique`, for example.

If initial XYZ files are not available, we can instead build all molecules from a list of IUPAC names (using :doc:`../cls/fetchMolecule`) and pipe this into :doc:`../cls/makeInput` to build input files for the optimization + frequency computations.
For instance, suppose we have a file :code:`molecules` that contains a list of IUPAC names:

.. literalinclude:: bash/opt_all_iupac
   :language: bash

Because many IUPAC names contain spaces and/or other non-alphanumeric characters (e.g. 1,3-butadiene) we remove those to form the name of the input file using the BASH command :code:`tr -dc [:alnum:]`.


Checking and Rerunning Jobs
---------------------------

After running the above optimizations, it is necessary to check two things:


#. Did the computations all finish correctly?
#. Are all optimized structures energy minima (no imaginary frequencies)

The following script will check these.
For jobs that did not generate an output file, the script just resubmits the original input file.
For jobs that ran but did not finish, a new job is submitted using the last geometry from the previous attempt using the same level of theory used in the corresponding output file.
For optimizations that ended with one or more imaginary vibrational frequency, the script displaces along the imaginary vibrational mode using :doc:`../cls/follow` and re-optimizes.
We'll assume that we are working with a set of XYZ files, as in the first example above.
The modifications to instead use a list of IUPAC names should be obvious.
Changing the level of theory and/or quantum chemistry package should also be straightforward.

.. literalinclude:: bash/check_jobs
   :language: bash


Potential Energy Scans for Stacked Dimers
-----------------------------------------

AaronTools CLSs make it trivial to run scans over different coordinates for non-bonded dimers (e.g. see `this recent paper <https://pubs.acs.org/doi/10.1021/jacs.5c03169>`_).
For instance, the script below will run wB97X-D/def2-TZVP single point energies on the benzene dimer as a function of x- and z-coordinates (with a fixed monomer geometry) from x = 0 to 5 A and z = 3 - 4 A.
It assumes that there is a local file called `benzene.xyz` that contains the coordinates of benzene in the xy-plane that is oriented with a vertex along the x-axis.

.. literalinclude:: bash/dimer_scan
   :language: bash

Note that :doc:`../cls/combineMonomers` can only accept geometries from STDIN or from a list of files, so we save the shifted benzene geometry to :code:`temp.xyz` before combining with :code:`benzene.xyz` to build each dimer.

We could modify this to instead run the T-shaped benzene dimer by first rotating the second benzene by 90 degrees around the y-axis (e.g. :code:`rotate.py benzene.xyz -x y -a 90`) and then piping this into :code:`translate.py -v $x 0 $z -o temp.xyz`.

We can also use AaronTools to gather the energies after making sure all of the single points ran to completion:

.. literalinclude:: bash/gather_scan
   :language: bash

Note that :doc:`../cls/makeInput` is not currently able to make SAPT input files, so if we wanted to run SAPT on these dimers we would need to use the AaronTools Python API to make input files for these types of computations.
There will be a future tutorial showing example uses of the AaronTools Python API.

