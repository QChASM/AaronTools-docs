Example Python Scripts for Common Tasks
=======================================

Many routine tasks can be handled using BASH scripts based on the AaronTools command line scripts (CLSs).
See :doc:`example_bash`.
However, for more complex tasks you'll need to use the AaronTools Python API.
A few examples are provided here to get you started (you can also peruse the `CLSs <https://github.com/QChASM/AaronTools.py/tree/master/bin>`_, although some are overly complicated for generality).
More examples will be added over time to make this a sort of 'cookbook' of AaronTools Python scripts

Note that these scripts assume you have correctly installed AaronTools (see :doc:`install`) and configured the :doc:`../other_docs/job_templates` to allow for job submission to a local queue.

Optimization and Frequencies
----------------------------

Although the task of submitting optimization + frequency jobs can be readily handled using a BASH script (see :doc:`example_bash`), we include a Python version here for completeness.
Here we use ORCA as an example, but the script below would instead use Psi4 or Gaussian by simply changing the filename extension to :code:`.in` or :code:`.com`, respectfully!

The following script will submit wB97XD/def2-TZVP optimization and frequency jobs (requesting 8 cores/processors, a 12 hour walltime, and 12 GB of memory) on all XYZ files in the current directory:

.. literalinclude:: python/opt_all.py
   :language: python

This could be easily modified to use IUPAC names or SMILES.


Transition Metal Complexes
^^^^^^^^^^^^^^^^^^^^^^^^^^

Alternatively, if we have a set of transition metal complexes, we need to build a :py:meth:`AaronTools.theory.BasisSet` object to specify different basis sets/ECPs for the transition metal (See :doc:`coding_with_theories`).

The following will build Gaussian input files to run optimizations and frequencies at the B3LYP-D3/6-31G(d)/LANL2DZ level of theory for all XYZ files in the current directory:

.. literalinclude:: python/opt_all_TM.py
   :language: python

After these are run to completion, we could submit B3LYP-D3/6-311+G(d,p)/LANL2DZ single point energies using the following:

.. literalinclude:: python/single_points.py
   :language: python

.. _python_SAPT_calculations:

SAPT Calculations
-----------------

In :ref:`bash_SAPT_calculations` we built a script to run SAPT calculations on the parallel stacked benzene dimer as a function of horizontal and vertical displacements.
In that case, because we were using :code:`makeInput.py`, we had to rely on Psi4 automatically partitioning the dimer into fragments.
If more control is required over how the supermolecule is fragmented for SAPT computations, we need to build a Psi4 input file explicitly separating the molecule into componets.

This requires some small changes to how we build the geometry and theory objects.
First, we need to define the :code:`components` of :code:`Geometry` to be a list of the individual monomers.
Second, in the :code:`theory` object we need to use :code:`SAPTMethod` instead of :code:`Method`.
Finally, the :code:`charge` and :code:`multiplicity` need to be lists consisting of the charge/multiplicity for the whole system and each monomer.

For instance, the following will submit a Psi4 job to calcualte the SAPT0/jun-cc-pVDZ energy on a dimer (read from :code:`dimer.xyz`) but use the AaronTools function :py:meth:`AaronTools.geometry.Geometry.get_monomers` to separate the monomers:

.. literalinclude:: python/sapt.py
   :language: python

Splitting Up Multi-structure XYZ Files
--------------------------------------

Often, one needs to take an XYZ file containing multiple structures (e.g. the conformers generated by `CREST <https://crest-lab.github.io/crest-docs/>`_) and
split this into individual XYZ files for each structure.
This can be done easily in AaronTools:

.. literalinclude:: python/split_XYZ.py
   :language: python


Analyzing XYZ Trajectories
--------------------------
AaronTools :py:meth:`AaronTools.fileIO.FileReader` objects can be used to read all geometries from multi-structure XYZ files.
This can be used, for example, to analyze distances, angles, etc. from an XYZ trajectory file.

The script below does this, reading :code:`traj.xyz` and printing the distance between atoms 1 and 2 and the 2-1-3 angle for each step.
This could be easily modified to instead only print every N steps, etc. or other geometric parameters.

.. literalinclude:: python/analyze_traj.py
   :language: python
